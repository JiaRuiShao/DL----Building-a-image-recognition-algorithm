Machine Learning 2 Outline


Linear Regression with Multiple Variables

Review: linear regression with one variable:


Notation:
n=num of features
m=num of examples
x(i)=input (features) of ith training example
xj(i)=value of feature j in ith training example

Hypothesis:
One Variable: hθ=θ0+θ1x
N Variables: hθ(x)=θ0+θ1X1+θ2X2+θ3X3+...θnXn

In order to develop intuition about this function, we can think about θ0 as the basic price of a house, θ1 as the price per square meter, θ2 as the price per floor, etc. X1 will be the number of square meters in the house, X2 the number of floors, etc.

Simplified hypothesis:
For convenience of notation, define X0=1 (X0(i)=1)


which is also called Multivariate linear regression

Linear regression with multiple variables is also known as "multivariate linear regression".

We now introduce notation for equations where we can have any number of input variables.


Now define the multi-variable form of the hypothesis function as follows, accommodating these multiple features:


Using the definition of matrix multiplication, our multi-variable hypothesis function can be concisely represented as:


This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more.

Remark: Note that for convenience reasons in this course we assumes   This allows us to do matrix operations with theta and x. This makes the two vectors 'theta' and x(i) match each other element-wise (that is, have the same number of elements: n+1).]



Gradient Descent


Gradient Descent for Multiple Variables
The gradient descent equation itself is generally the same form; we just have to repeat it for our 'n' features:


In other words:


The following image compares gradient descent with one variable to gradient descent with multiple variables:

Gradient Descent in Practice I - Feature Scaling
We can speed up gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.
The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally:


These aren't exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few.

Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula:


Where μi is the average of all the values for feature (i) and Si is the range of values (max - min), or Si is the standard deviation.

Note that dividing by the range, or dividing by the standard deviation, give different results. The quizzes in this course use range - the programming exercises use standard deviation.

For example, if Xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, Xi = (price - 1000)/1900

Gradient Descent in Practice II - Learning Rate


two.

Summary:
	* 
if the learning rate(alpha) is too small, you can have a slow convergence problem
	* 
if the learning rate(alpha) is too large, J(theta) may not decrease on every iteration and it may not even converge.



Try a range of values for alpha:
..., 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1,...

Debugging gradient descent. Make a plot with number of iterations of gradient descent on the x-axis. Now plot the cost function, J(θ) over the number of iterations of gradient descent. If J(θ) ever increases, then you probably need to decrease α.

Automatic convergence test. Declare convergence if J(θ) decreases by less than E in one iteration, where E is some small value such as 10−3. However in practice it's difficult to choose this threshold value.



It has been proven that if learning rate α is sufficiently small, then J(θ) will decrease on every iteration.



To summarize:
	* 
If (alpha) α is too small: slow convergence.
	* 
If (alpha) α is too large: ￼may not decrease on every iteration and thus may not converge.



Polynomial Regression
polynomial regression allows us to use the machinery of linear regression to fit very complicated, even very non-linear functions.

We can improve our features and the form of our hypothesis function in a couple of different ways. We can combine multiple
features into one. For example, we can combine X1 and X2 into a new feature X3 by taking X1·X2.

Polynomial Regression
Our hypothesis function need not be linear (a straight line) if that does not fit the data well.
We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).

For example, if our hypothesis function is hθ(x)=θ0+θ1*X1
Then we can create additional features based on X1, to get the quadratic function  hθ(x)=θ0+θ1*X1+θ2*X1^2 or the cubic function hθ(x)=θ0+θ1*X1+θ2*X1^2+θ3*X1^3

In the cubic version, we have create new features X2 and X3 where X2=X1^2 and X3=X1^3.

To make it a square root function, we could do: hθ(x)=θ0+θ1*X1+θ2*X1^1/2


One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important.
eg. if X1 has range 1 - 1000 then range of X2 becomes 1 - 1000000 and that of X3 becomes 1 - 1000000000

eg:
House prices prediction
hθ(x)=θ0+θ1*frontage+θ2*depth

instead, we could define new feature area:
Area = frontage*depth
Then, hθ(x)=θ0+θ1*Area



feature scaling becomes more important:
size: 1-1000
size^2: 1-10^6
size^3: 1-10^9


Note that the curve that "doesn't ever come back down" is in reference to the square root form of  the hypothesis function that uses the sqrt() function (shown by the solid purple line), not the one that uses size^2 (shown with the dotted blue line). The quadratic form of the hypothesis function would have the shape shown with the blue dotted line if θ2 was negative.



Normal Equation —— an alternative for Gradient Descent to minimize cost function J

Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the "Normal Equation" method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below:


In the problem that we are interested in, Theta is no longer just a real number, but, instead, is this n+1-dimensional parameter vector, and,a cost function J is a function of this vector value or Theta 0 through Theta m. And, a cost function looks like this, some square cost function on the right. How do we minimize this cost function J?

Solution: 
Take the partial derivative of J, with respect to every parameter of Theta J in turn, and then, to set all of these to 0. If you do that, and you solve for the values of Theta 0, Theta 1, up to Theta N, then, this would give you that values of Theta to minimize the cost function J.



eg: 


	* 
No need to consider feature scaling for normal equation.



Choose between Gradient Descent and Normal Equation

Gradient Descent
Normal Equation
Need to choose alpha
No need to choose alpha
Needs many iterations
No need to iterate
O (kn^2)
O(n^3), need to calculate inverse of XTX
Works well when n is large
Slow if n is very large

With the normal equation, computing the inversion has complexity O(n3). So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.

Proof for Normal Equation Formula:
http://eli.thegreenplace.net/2014/derivation-of-the-normal-equation-for-linear-regression


Normal Equation Non-invertibility

When implementing the normal equation in octave we want to use the 'pinv' (pseudo-inverse) function rather than 'inv.'

XTXX^TXXTX may be noninvertible. The common causes are:

	* 
Redundant features, where two features are very closely related (i.e. they are linearly dependent)
	* 
Too many features (e.g. m ≤ n). In this case, delete some features or use "regularization" (to be explained in a later lesson).



Solutions to the above problems include deleting a feature that is using regularization (later in this course) or deleting one or more features when there are too many features.

ML:Octave Tutorial
Basic Operations
1==2
% false
ans = 0

1~=2
% true
ans = 1

&& and
| | or

% semicolon suppressing output
disp(var) syntax used to print variable

format long
format short

A = [1 2; 3 4; 5 6]
V = 1:0.1:2 from 1 to 2 by increasing 0.1 once
V = 1:6
ones(2,3) -- generate a 2x3 matrix with all 1s
2*ones(2,3) -- generate a 2x3 matrix with all 2s
w=zeros(1,3)
w=rand(1,3)
w=randn(1,3) Gaussian random variable/Normal Random Variable

hist(W) -- histogram

eye(4) -- 4x4 identity matrix

help eye
help rand
help help

2) Add the directory of the function to the load path and save it:You should not use addpath/savepath for any of the assignments in this course. Instead use 'cd' to change the current working directory. Watch the video on submitting assignments in week 2 for instructions.


Octave's functions can return more than one value:

Call the above function this way:


Vectorization

Vectorization is the process of taking code that relies on loops and converting it into matrix operations. It is more efficient, more elegant, and more concise.
As an example, let's compute our prediction from a hypothesis. Theta is the vector of fields for the hypothesis and x is a vector of variables.
With loops:

If you recall the definition multiplying vectors, you'll see that this one operation does the element-wise multiplication and overall sum in a very concise notation.

Working on and Submitting Programming Exercises
1. Download and extract the assignment's zip file.
2. Edit the proper file 'a.m', where a is the name of the exercise you're working on.
3. Run octave and cd to the assignment's extracted directory
4. Run the 'submit' function and enter the assignment number, your email, and a password (found on the top of the "Programming Exercises" page on coursera)
Video Lecture Table of Contents
Basic Operations

Computing on Data

Plotting data

Control statements


Vectorization

